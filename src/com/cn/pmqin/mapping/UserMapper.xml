<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名, 生成的SQL映射文件，这样就能够保证namespace的值是唯一的 -->
<mapper namespace="com.cn.pmqin.mapping.UserMapper">
	<!-- 开启二级缓存 -->
	<!-- <cache eviction="FIFO" -->
	<!-- 回收策略为先进先出 -->
	<!-- flushInterval="60000" -->
	<!-- 自动刷新时间60s -->
	<!-- size="512" -->
	<!-- 最多缓存512个引用对象 -->
	<!-- readOnly="true" /> -->
	<!-- 只读 -->

	<!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复 使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型 
		resultType="com.cn.pmqin.domain.User"就表示将查询结果封装成一个User类的对象返回User类就是users表所对应的实体类 -->

	<!--根据id查询得到一个user对象 -->
	<select id="getUsers" parameterType="int" resultType="User">
		select * from User where id=#{id}
	</select>

	<!--我们在sql映射xml文件中的引用实体类时，需要写上实体类的全类名(包名+类名) 如下：resultType="com.cn.pmqin.domain.User" 
		parameterType="User"这样写就简单多了，为了达到这种效果，我们需要在conf.xml文件中为实体类="com.cn.pmqin.domain.User"定义一个别名为"User"， 
		具体做法如下： 在conf.xml文件中<configuration></configuration> -->
	
<!-- 	 -->
	<insert id="addUser" parameterType="User">
	
	
		insert into User
		(name,age)
		value(#{name},#{age})
	</insert>

	<delete id="deleteUser" parameterType="int">
		delete from User where
		id=#{id}
	</delete>

	<update id="updateUser" parameterType="User">
		update User set
		name=#{name},age=#{age} where id=#{id}
	</update>

	<select id="getUser" parameterType="int" resultType="User">
		select * from User where id=#{id}
	</select>

	<select id="getAllUsers" resultType="User">
		select * from User
	</select>

	<delete id="deleteUserByage" parameterType="int">
		delete from User where age=#{age}
	</delete>

	<select id="getUsersByage" parameterType="int" resultType="User">
		select * from User where age=#{age}
	</select>
	
<!-- 	 #{} 表示一个占位符 可以是任意   -->
<!-- 	 select * from User where name like %小明%  如果是这样的sql ,那么传递%%由客户端添加 -->
<!-- 	 ${ }表示拼接sql串，如果传入的是简单类型  参数只能是value  如： ‘%${value }%’  不建议使用 -->
	<select id="getUsersByName" parameterType="java.lang.String" resultType="User">
		select * from User where name like #{value}
	</select>



</mapper>